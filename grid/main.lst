# file opened: main.asm
 1    0000                      device  zxspectrum48
 2    0000
 3    0000                      org     $8000
 4    8000
 5    8000              flags:  equ     $ff00
 6    8000
 7    8000              line_height = 8
 8    8000
 9    8000              start:
10    8000 AF                   xor     a
11    8001 32 00 FF             ld      (flags),a
12    8004 0E C0                ld      c,192
13    8006 16 08                ld      d,line_height
14    8008              .init:
15    8008 0D                   dec     c
16    8009 06 20                ld      b,32
17    800B              .loop:
18    800B 05                   dec     b
19    800C C5                   push    bc
20    800D CB 10                rl b
21    800F CB 10                rl b
22    8011 CB 10                rl b
23    8013 CD 52 80             call    get_pixel_address
24    8016 C1                   pop     bc
25    8017 3E 00                ld      a,0
26    8019 B8                   cp      b
27    801A C4 4A 80             call    nz,draw_vertical_pixel
28    801D 3A 00 FF             ld      a,(flags)
29    8020 CB 47                bit     0,a
30    8022 C4 4E 80             call    nz,draw_horizontal_line
31    8025 04                   inc     b
32    8026 10 E3                djnz    .loop                   ; complete inner loop
33    8028 15                   dec     d
34    8029 C4 41 80             call    nz,res_flag
35    802C CC 36 80             call    z,set_flag
36    802F 3E 00                ld      a,0
37    8031 B9                   cp      c
38    8032 C2 08 80             jp      nz,.init                ; and complete outer loop
39    8035 C9                   ret
40    8036
41    8036              set_flag:
42    8036 3A 00 FF             ld      a,(flags)
43    8039 CB C7                set     0,a
44    803B 32 00 FF             ld      (flags),a
45    803E 16 08                ld      d,line_height
46    8040 C9                   ret
47    8041
48    8041              res_flag:
49    8041 3A 00 FF             ld      a,(flags)
50    8044 CB 87                res     0,a
51    8046 32 00 FF             ld      (flags),a
52    8049 C9                   ret
53    804A
54    804A              draw_vertical_pixel:
55    804A 3E 80                ld      a,%10000000
56    804C 77                   ld      (hl),a
57    804D C9                   ret
58    804E
59    804E              draw_horizontal_line:
60    804E 3E 7F                ld      a,%01111111
61    8050 77                   ld      (hl),a
62    8051 C9                   ret
63    8052
64    8052              ; input: b = x pixel pos, c = y pixel pos, returns hl, destroys a
65    8052              get_pixel_address:
66    8052 79                   ld      a,c                     ; load y coordinate
67    8053 E6 07                and     %00000111               ; mask out bits that are not y2, y1, y0
68    8055 F6 40                or      %01000000               ; set screen base address ($4000 high byte)
69    8057 67                   ld      h,a                     ; store partial y in h
70    8058 79                   ld      a,c                     ; load y coordinate again
71    8059 1F                   rra                             ; rotate to get y7, y6
72    805A 1F                   rra
73    805B 1F                   rra
74    805C E6 18                and     %00011000               ; mask out other bits
75    805E B4                   or      h                       ; combine with partial y
76    805F 67                   ld      h,a                     ; and store in h again
77    8060 79                   ld      a,c                     ; load y coordinate again
78    8061 17                   rla                             ; rotate to get y5, y4, y3
79    8062 17                   rla
80    8063 E6 E0                and     %11100000               ; mask out other bits
81    8065 6F                   ld      l,a                     ; store in l
82    8066 78                   ld      a,b                     ; load x coordinate
83    8067 1F                   rra                             ; rotate to get x5, x4, x3, x2, x1
84    8068 1F                   rra
85    8069 1F                   rra
86    806A E6 1F                and     %00011111               ; mask out non-x bits
87    806C B5                   or      l                       ; combine with y5, y4, y3
88    806D 6F                   ld      l,a                     ; store in l
89    806E C9                   ret
90    806F
91    806F                      savesna "main.sna",start
92    806F
# file closed: main.asm
