# file opened: main.asm
  1   0000                              device  zxspectrum48
  2   0000                              sldopt  COMMENT WPMEM,LOGPOINT,ASSERTION
  3   0000
  4   0000                              org     $8000
  5   8000
  6   8000              ; addresses
  7   8000              SHIFT           equ     $ff00                   ; current sprite bitshift counter
  8   8000              X_DIR           equ     $ff01                   ; current x movement direction (-1 | 1)
  9   8000              Y_DIR           equ     $ff02                   ; current y movement direction (-1 | 1)
 10   8000
 11   8000              start:
 12   8000 06 00                        ld      b,0                     ; initialize x (in pixels)
 13   8002 0E 00                        ld      c,0                     ; initialize y (in pixels)
 14   8004 3E 01                        ld      a,1                     ; initialize x and y movement directions
 15   8006 32 01 FF                     ld      (X_DIR),a
 16   8009 32 02 FF                     ld      (Y_DIR),a
 17   800C FB                           ei
 18   800D              .loop:
 19   800D 78                           ld      a,b                     ; check three least significant bits of x coord
 20   800E E6 07                        and     %00000111               ; to get distance in pixels from cell start
 21   8010 32 00 FF                     ld      (SHIFT),a               ; which is the number of needed bitshifts
 22   8013 CD 9A 80                     call    get_pixel_address       ; get video memory address in hl
 23   8016 C5                           push    bc
 24   8017 CD 52 80                     call    draw_sprite             ; draw sprite (this moves 8 pixels down)
 25   801A C1                           pop     bc
 26   801B 76                           halt
 27   801C CD 9A 80                     call    get_pixel_address       ; rewind hl to the original position
 28   801F C5                           push    bc
 29   8020 CD 8C 80                     call    clear_sprite            ; clear the sprite we've drawn
 30   8023 C1                           pop     bc
 31   8024 3A 01 FF                     ld      a,(X_DIR)
 32   8027 80                           add     b
 33   8028 47                           ld      b,a
 34   8029 3A 02 FF                     ld      a,(Y_DIR)
 35   802C 81                           add     c
 36   802D 4F                           ld      c,a
 37   802E CD 38 80                     call    reverse_x_dir           ; reverse sprite x direction
 38   8031 CD 45 80                     call    reverse_y_dir           ; reverse sprite y direction
 39   8034 C3 0D 80                     jp      .loop
 40   8037 C9                           ret
 41   8038
 42   8038              reverse_x_dir:                                  ; reverse X_DIR, destroys a
 43   8038 78                           ld      a,b
 44   8039 D6 F9                        sub     256-7                   ; subtract screen width less sprite size
 45   803B D8                           ret     c                       ; ignore if sprite within bounds
 46   803C 3A 01 FF                     ld      a,(X_DIR)
 47   803F ED 44                        neg
 48   8041 32 01 FF                     ld      (X_DIR),a
 49   8044 C9                           ret
 50   8045
 51   8045              reverse_y_dir:                            ; reverse Y_DIR, destroys a
 52   8045 79                           ld      a,c
 53   8046 D6 B7                        sub     192-9                   ; subtract screen height less sprite size
 54   8048 D8                           ret     c                       ; ignore if sprite within bounds
 55   8049 3A 02 FF                     ld      a,(Y_DIR)
 56   804C ED 44                        neg
 57   804E 32 02 FF                     ld      (Y_DIR),a
 58   8051 C9                           ret
 59   8052
 60   8052              ; draw 8x8 sprite at x, y pixel coordinates
 61   8052              ;
 62   8052              ; input: hl = video memory address, SPRITE = 8x8 sprite data address,
 63   8052              ; SHIFT = sprite bitshift count in pixels, destroys a, bc, de,
 64   8052              ; moves hl 8 pixels down
 65   8052              draw_sprite:
 66   8052 06 08                        ld      b,$8                    ; set counter to sprite size in pixels
 67   8054 11 C6 80                     ld      de,SPRITE               ; load sprite data address into de
 68   8057              .loop:
 69   8057 3A 00 FF                     ld      a,(SHIFT)               ; get sprite bitshift count
 70   805A 4F                           ld      c,a                     ; and save it in c
 71   805B 1A                           ld      a,(de)                  ; get current sprite line
 72   805C CD 72 80                     call    shift_by_c              ; shift it right by the correct amount
 73   805F 77                           ld      (hl),a                  ; write shifted line to video memory
 74   8060 2C                           inc     l                       ; go right to next character cell
 75   8061 3A 00 FF                     ld      a,(SHIFT)               ; get bitshift count again
 76   8064 4F                           ld      c,a
 77   8065 1A                           ld      a,(de)                  ; get current sprite line again
 78   8066 CD 7C 80                     call    reverse_shift_by_c      ; shift it left by 8 - SHIFT
 79   8069 77                           ld      (hl),a                  ; write it to the second cell
 80   806A 2D                           dec     l                       ; return to the previous cell
 81   806B CD B7 80                     call    go_to_next_line         ; move to next y value
 82   806E 13                           inc     de                      ; select next sprite line
 83   806F 10 E6                        djnz    .loop                   ; repeat until b == 0
 84   8071 C9                           ret
 85   8072
 86   8072              shift_by_c:                                     ; shift a right by c, destroys c
 87   8072 0C                           inc     c                       ; check if we start with zero
 88   8073 0D                           dec     c                       ; NOTE: maybe there's a faster way?
 89   8074 C8                           ret     z                       ; zero means no need for shifting
 90   8075              .loop:
 91   8075 CB 3F                        srl     a                       ; shift right and zero leftmost bit
 92   8077 0D                           dec     c                       ; decrease bitshift count
 93   8078 C2 75 80                     jp      nz,.loop                ; repeat until SHIFT == 0
 94   807B C9                           ret
 95   807C
 96   807C              reverse_shift_by_c:                             ; shift a left by 8 - c, destroys c
 97   807C F5                           push    af
 98   807D 79                           ld      a,c
 99   807E D6 08                        sub     8                       ; calculate SHIFT - 8
100   8080 ED 44                        neg                             ; negate to get 8 - SHIFT
101   8082 4F                           ld      c,a
102   8083 F1                           pop     af
103   8084 C8                           ret     z                       ; nothing to be done if 8 - 8
104   8085              .loop:
105   8085 CB 27                        sla     a                       ; shift left and zero rightmost bit
106   8087 0D                           dec     c                       ; decrease bitshift count
107   8088 C2 85 80                     jp      nz,.loop                ; repeat until 8 - SHIFT == 0
108   808B C9                           ret
109   808C
110   808C              ; clear 8x8 sprite at x, y pixel coordinates
111   808C              ;
112   808C              ; input: hl = video memory address, destroys a, b, moves hl 8 pixels down
113   808C              clear_sprite:
114   808C 06 08                        ld      b,$8                    ; set counter to sprite size in pixels
115   808E              .loop:
116   808E 36 00                        ld      (hl),0                  ; zero current address
117   8090 2C                           inc     l                       ; go right to next cell
118   8091 36 00                        ld      (hl),0                  ; zero current address
119   8093 2D                           dec     l                       ; return to first cell
120   8094 CD B7 80                     call    go_to_next_line         ; go down one pixel
121   8097 10 F5                        djnz    .loop                   ; repeat until done :3
122   8099 C9                           ret
123   809A
124   809A              ; get video memory address of pixel coordinates
125   809A              ;
126   809A              ; input: b = x pixel pos, c = y pixel pos, returns hl, destroys a
127   809A              get_pixel_address:
128   809A 79                           ld      a,c                     ; load y coordinate
129   809B E6 07                        and     %00000111               ; mask out bits that are not y2, y1, y0
130   809D F6 40                        or      %01000000               ; set screen base address ($4000 high byte)
131   809F 67                           ld      h,a                     ; store partial y in h
132   80A0 79                           ld      a,c                     ; load y coordinate again
133   80A1 1F                           rra                             ; rotate to get y7, y6
134   80A2 1F                           rra
135   80A3 1F                           rra
136   80A4 E6 18                        and     %00011000               ; mask out other bits
137   80A6 B4                           or      h                       ; combine with partial y
138   80A7 67                           ld      h,a                     ; and store in h again
139   80A8 79                           ld      a,c                     ; load y coordinate again
140   80A9 17                           rla                             ; rotate to get y5, y4, y3
141   80AA 17                           rla
142   80AB E6 E0                        and     %11100000               ; mask out other bits
143   80AD 6F                           ld      l,a                     ; store in l
144   80AE 78                           ld      a,b                     ; load x coordinate
145   80AF 1F                           rra                             ; divide by 8 to get x4, x3, x2, x1, x0
146   80B0 1F                           rra
147   80B1 1F                           rra
148   80B2 E6 1F                        and     %00011111               ; mask out non-x bits
149   80B4 B5                           or      l                       ; combine with y5, y4, y3
150   80B5 6F                           ld      l,a                     ; store in l
151   80B6 C9                           ret
152   80B7
153   80B7              ; move video address in hl one line down
154   80B7              ;
155   80B7              ; input: hl = video memory address, destroys a
156   80B7              go_to_next_line:
157   80B7 24                           inc     h                       ; increment y2, y1, y0
158   80B8 7C                           ld      a,h
159   80B9 E6 07                        and     %00000111               ; did we overflow into y6?
160   80BB C0                           ret     nz                      ; return if not
161   80BC 7D                           ld      a,l                     ; if yes, go to next character line
162   80BD C6 20                        add     a,%00100000             ; increment y3
163   80BF 6F                           ld      l,a
164   80C0 D8                           ret     c                       ; did we overflow l (y5, y4, y3)?
165   80C1 7C                           ld      a,h                     ; if not, undo overflow into y6
166   80C2 D6 08                        sub     %00001000               ; to not jump to next 3rd of screen
167   80C4 67                           ld      h,a
168   80C5 C9                           ret
169   80C6
170   80C6 3C           SPRITE          db      %00111100               ; 8x8 sprite data
171   80C7 42                           db      %01000010
172   80C8 81                           db      %10000001
173   80C9 A5                           db      %10100101
174   80CA 81                           db      %10000001
175   80CB 99                           db      %10011001
176   80CC 42                           db      %01000010
177   80CD 3C                           db      %00111100
178   80CE
179   80CE                              savesna "main.sna",start
180   80CE
# file closed: main.asm
